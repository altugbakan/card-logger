name: Build and Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: windows
            goarch: amd64
          - goos: darwin
            goarch: arm64
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.21"

      - name: Check out code
        uses: actions/checkout@v2

      - name: Build binary
        run: |
          FILENAME=card-logger
          if [ "${{ matrix.goos }}" = "windows" ]; then
            FILENAME=${FILENAME}.exe
          fi
          env GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=1 go build -o $FILENAME
          zip card-logger-${{ matrix.goos }}-${{ matrix.goarch }}.zip $FILENAME

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: card-logger-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          path: card-logger-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          if-no-files-found: error

  create_release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false

  fetch_and_upload_previous_release_asset:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: List releases
        id: list_releases
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find the second latest release download URL for cards.db.zip
        id: find_asset
        run: |
          RELEASES=$(echo '${{ steps.list_releases.outputs.data }}' | jq '[.[] | select(.assets[].name == "cards.db.zip")][1]')
          ASSET_URL=$(echo $RELEASES | jq -r '.assets[] | select(.name == "cards.db.zip").browser_download_url')
          echo "ASSET_URL=$ASSET_URL" >> $GITHUB_ENV

      - name: Download cards.db.zip from the second latest release
        run: |
          curl -L -o cards.db.zip $ASSET_URL

      - name: Upload cards.db.zip to the new release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./cards.db.zip
          asset_name: cards.db.zip
          asset_content_type: application/zip

  upload_assets:
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - asset_name: card-logger-linux-amd64.zip
          - asset_name: card-logger-darwin-amd64.zip
          - asset_name: card-logger-windows-amd64.zip
          - asset_name: card-logger-darwin-arm64.zip
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.asset_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/zip
