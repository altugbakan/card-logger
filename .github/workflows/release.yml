name: Build and Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: windows
            goarch: amd64
          - goos: darwin
            goarch: arm64
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.21"

      - name: Check out code
        uses: actions/checkout@v2

      - name: Build binary
        run: |
          FILENAME=card-logger
          if [ "${{ matrix.goos }}" = "windows" ]; then
            FILENAME=${FILENAME}.exe
          fi
          env GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o $FILENAME
          zip card-logger-${{ matrix.goos }}-${{ matrix.goarch }}.zip $FILENAME

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: card-logger-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          path: card-logger-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          if-no-files-found: error

  create_release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false

  fetch_and_upload_previous_release_asset:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: List releases
        id: list_releases
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases?per_page=2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find and download all cards_*.zip from the second latest release
        run: |
          RELEASES=$(echo '${{ steps.list_releases.outputs.data }}' | jq '[.[] | select(.assets[].name | test("cards.*\\.zip"))][0]')
          ASSET_URLS=$(echo $RELEASES | jq -r '.assets[] | select(.name | test("cards.*\\.zip")).browser_download_url')
          if [ -z "$ASSET_URLS" ]; then
            echo "No matching assets found."
            exit 1
          fi
          for url in $ASSET_URLS; do
            ASSET_NAME=$(basename $url)
            curl -L -o $ASSET_NAME $url
            echo "::set-output name=${ASSET_NAME}::${url}"
          done
        id: download_assets

      - name: Upload all cards_*.zip from the second latest release
        id: upload-release-assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create_release.outputs.id }}
          assets_path: ./

  upload_assets:
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - asset_name: card-logger-linux-amd64.zip
          - asset_name: card-logger-darwin-amd64.zip
          - asset_name: card-logger-windows-amd64.zip
          - asset_name: card-logger-darwin-arm64.zip
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.asset_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/zip
